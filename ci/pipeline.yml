jobs:
  - name: push-dev-image
    serial_groups: [track1, track2]
    plan:
      - get: resource-src
        trigger: true
      - get: resource-src-ci
      - task: build-artifacts
        file: resource-src-ci/ci/tasks/build-dev-artifacts.yml
      - put: terraform-dev-image
        params:
          build: build-artifacts/
          cache: true

  - name: test-unit
    serial_groups: [track1, track2]
    plan:
      - get: resource-src
        trigger: true
      - get: resource-src-ci
        passed: [push-dev-image]
      - task: test-unit
        file: resource-src-ci/ci/tasks/test-unit.yml
        params:
          AWS_ACCESS_KEY:           {{ec2_access_key}}
          AWS_SECRET_KEY:           {{ec2_secret_key}}
          AWS_REGION:               {{aws_region}}
          AWS_BUCKET:               {{storage_bucket}}
          AWS_BUCKET_SUBFOLDER:     terraform-test-unit
          S3_COMPATIBLE_BUCKET:     {{s3_compatible_bucket}}
          S3_COMPATIBLE_ENDPOINT:   {{s3_compatible_endpoint}}
          S3_COMPATIBLE_ACCESS_KEY: {{s3_compatible_access_key}}
          S3_COMPATIBLE_SECRET_KEY: {{s3_compatible_secret_key}}
          S3_KMS_KEY_ID:            {{s3_kms_key_id}}

  - name: push-test-image
    serial_groups: [track1, track2]
    plan:
      - get: resource-src
        trigger: true
      - get: resource-src-ci
        passed: [test-unit]
      - task: build-artifacts
        file: resource-src-ci/ci/tasks/build-prod-artifacts.yml
      - put: terraform-test-image
        params:
          build: build-artifacts/
          cache: true

  - name: create-infrastructure
    serial_groups: [track1]
    plan:
      - get: resource-src
        trigger: true
        passed: [push-test-image]
      - put: terraform
        params:
          env_name: terraform-ci
          vars:
            object_key: ci-pipeline/track1
            object_content: "terraform is neat!"
      - &show-outputs
        task: show-outputs
        config:
          platform: linux
          image_resource: &test-image
            type: docker-image
            source:
              repository: cycloid/terraform-resource
              tag: test
          inputs:
            - name: terraform
          run:
            path: /bin/sh
            args:
              - -c
              - |
                  echo "name: $(cat terraform/name)"
                  echo "metadata: $(cat terraform/metadata)"

  - name: update-infrastructure-via-params
    serial_groups: [track1]
    plan:
      - get: resource-src
        trigger: true
        passed: [create-infrastructure]
      - put: terraform
        params:
          env_name: terraform-ci
          vars:
            # update the file contents
            object_content: "terraform is still neat!"
      - *show-outputs

  - name: update-infrastructure-via-file
    serial_groups: [track1]
    plan:
      - get: resource-src
        trigger: true
        passed: [update-infrastructure-via-params]
      - task: make-var-file
        config:
          platform: linux
          image_resource: *test-image
          outputs:
             - name: vars
          run:
            path: /bin/sh
            args:
              - -c
              - |
                  echo 'object_content: "terraform files are neat too!"' >> vars/input.yml
      - put: terraform
        params:
          env_name: terraform-ci
          var_file: vars/input.yml
      - *show-outputs

  - name: destroy-infrastructure
    serial_groups: [track1]
    plan:
      - get: resource-src
        trigger: true
        passed: [update-infrastructure-via-file]
      - put: terraform
        params:
          env_name: terraform-ci
          action: destroy
        get_params:
          action: destroy

  - name: create-env-and-lock
    serial_groups: [track2]
    plan:
      - get: resource-src
        trigger: true
        passed: [push-test-image]
      - put: terraform-remote-src
        params:
          # generate a random env_name for the lock file
          generate_random_name: true
          delete_on_failure: true
          vars:
            object_key: ci-pipeline/track2
            object_content: "terraform is neat!"
      # create a new lock containing the terraform output
      - put: locks
        params:
          add: terraform-remote-src/

  - name: lock-env
    serial_groups: [track2]
    plan:
      - get: resource-src
        trigger: true
        passed: [create-env-and-lock]
      - put: locks
        params:
          acquire: true
      - task: show-lock
        config:
          platform: linux
          image_resource: *test-image
          inputs:
            - name: locks
          run:
            path: /bin/sh
            args:
              - -c
              - |
                  echo "name: $(cat locks/name)"
                  echo "metadata: $(cat locks/metadata)"

  - name: destroy-env-and-lock
    serial_groups: [track2]
    plan:
      - get: resource-src
        trigger: true
        passed: [lock-env]
      - get: locks
        passed: [lock-env]
      # destroy the IaaS resources
      - put: terraform-remote-src
        params:
          env_name_file: locks/name
          action: destroy
        get_params:
          action: destroy
      # destroy the lock
      - put: locks
        params:
          remove: locks/

  - name: push-prod-image
    plan:
      - get: resource-src
        passed: [destroy-env-and-lock, destroy-infrastructure]
        trigger: true
      - put: terraform-prod-image
        params:
          pull_repository: cycloid/terraform-resource
          pull_tag: test
          cache: true

resource_types:
- name: terraform
  type: docker-image
  source:
    # use tag `latest` for stable release
    repository: cycloid/terraform-resource
    tag: test

resources:
- name: resource-src-ci
  type: git
  source:
    uri: git@github.com:cycloidio/terraform-resource.git
    branch: ci
    private_key: {{git_private_key}}
- name: resource-src
  type: git
  source:
    uri: git@github.com:cycloidio/terraform-resource.git
    branch: plan
    private_key: {{git_private_key}}
- name: terraform-dev-image
  type: docker-image
  source:
    repository: cycloid/terraform-resource
    tag: dev
    email: {{docker_email}}
    username: {{docker_username}}
    password: {{docker_password}}
- name: terraform-test-image
  type: docker-image
  source:
    repository: cycloid/terraform-resource
    tag: test
    email: {{docker_email}}
    username: {{docker_username}}
    password: {{docker_password}}
- name: terraform-prod-image
  type: docker-image
  source:
    repository: cycloid/terraform-resource
    tag: latest
    email: {{docker_email}}
    username: {{docker_username}}
    password: {{docker_password}}
- name: locks
  type: pool
  source:
    uri: git@github.com:cycloidio/terraform-resource.git
    branch: ci-pool-test
    pool: aws-ci-pool
    private_key: {{git_private_key}}
- name: terraform
  type: terraform
  source: &terraform-source
    # options common to all jobs can be specified under source
    storage:
      access_key_id:     {{storage_access_key}}
      secret_access_key: {{storage_secret_key}}
      region_name:       {{aws_region}}
      bucket:            {{storage_bucket}}
      bucket_path:       ci-pipeline
    terraform_source: resource-src/fixtures/aws
    vars:
      region:      {{aws_region}}
      access_key:  {{ec2_access_key}}
      secret_key:  {{ec2_secret_key}}
      bucket:      {{storage_bucket}}
- name: terraform-remote-src
  type: terraform
  source:
    <<: *terraform-source
    terraform_source: github.com/cycloidio/terraform-resource//fixtures/aws
